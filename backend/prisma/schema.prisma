generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Groups {
    id        Int      @id @default(autoincrement())
    name      String
    students  Student[]
}

model Teacher {
  id        Int      @id @default(autoincrement())
  avatar    String   @default("uploads/avatars/default.jpg")
  email     String   @unique
  password  String
  name      String?
  createdAt DateTime @default(now())
}

model Student {
  id        Int         @id @default(autoincrement())
  name      String
  reputation Int        @default(0)
  historyReps HistoryRep[]
  groupsId  Int
  groups    Groups      @relation(fields: [groupsId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
}

model HistoryRep {
  id           Int      @id @default(autoincrement())
  studentId    Int      // Ссылка на студента
  student      Student  @relation(fields: [studentId], references: [id], onDelete: Cascade) // Связь с моделью Student
  change       Int      // Изменение репутации (может быть положительным или отрицательным)
  reason       String?  // Причина изменения (опционально)
  lessonId     Int?     // Айди предмета (опционально)
  lesson       Lessons? @relation(fields: [lessonId], references: [id], onDelete: Cascade) // Связь с моделью Lessons (каскадное удаление)
  createdAt    DateTime @default(now())
}

model Lessons {
  id           Int         @id @default(autoincrement())
  name         String      // Название учебного предмета
  historyReps  HistoryRep[] // Связь с моделью HistoryRep
  createdAt    DateTime    @default(now())
}